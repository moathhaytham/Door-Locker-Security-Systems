
MC2_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000251a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000251a  000025ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000c2  008000c2  00002610  2**0
                  ALLOC
  3 .stab         0000264c  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d9  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000065e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000822e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009119  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <main>
      8a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DcMotor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Set the 2 pins as output pins*/
	GPIO_setupPinDirection(MOTORR_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTORR_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <GPIO_setupPinDirection>


	GPIO_writePin(MOTORR_PORT_ID, MOTOR_IN1_PIN_ID, OFF);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
	GPIO_writePin(MOTORR_PORT_ID, MOTOR_IN2_PIN_ID, OFF);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DcMotor_Rotate+0x6>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_PWM_Init(speed);
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Timer0_PWM_Init>
	GPIO_writePort(MOTORR_PORT_ID, state);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	69 81       	ldd	r22, Y+1	; 0x01
     b94:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePort>
}
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <Buzzer_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Buzzer_init	()
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	/*Set the pin direction to output*/
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID ,PIN_OUTPUT);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	65 e0       	ldi	r22, 0x05	; 5
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	65 e0       	ldi	r22, 0x05	; 5
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <Buzzer_on>:


void Buzzer_on		(void)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	65 e0       	ldi	r22, 0x05	; 5
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
}
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <Buzzer_off>:


void Buzzer_off		(void)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	65 e0       	ldi	r22, 0x05	; 5
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <GPIO_setupPinDirection+0x6>
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <GPIO_setupPinDirection+0x8>
     bfc:	0f 92       	push	r0
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	6a 83       	std	Y+2, r22	; 0x02
     c06:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	88 30       	cpi	r24, 0x08	; 8
     c0c:	08 f0       	brcs	.+2      	; 0xc10 <GPIO_setupPinDirection+0x1c>
     c0e:	d5 c0       	rjmp	.+426    	; 0xdba <GPIO_setupPinDirection+0x1c6>
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	08 f0       	brcs	.+2      	; 0xc18 <GPIO_setupPinDirection+0x24>
     c16:	d1 c0       	rjmp	.+418    	; 0xdba <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	3d 83       	std	Y+5, r19	; 0x05
     c20:	2c 83       	std	Y+4, r18	; 0x04
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	9d 81       	ldd	r25, Y+5	; 0x05
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	91 05       	cpc	r25, r1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <GPIO_setupPinDirection+0x3a>
     c2c:	43 c0       	rjmp	.+134    	; 0xcb4 <GPIO_setupPinDirection+0xc0>
     c2e:	2c 81       	ldd	r18, Y+4	; 0x04
     c30:	3d 81       	ldd	r19, Y+5	; 0x05
     c32:	22 30       	cpi	r18, 0x02	; 2
     c34:	31 05       	cpc	r19, r1
     c36:	2c f4       	brge	.+10     	; 0xc42 <GPIO_setupPinDirection+0x4e>
     c38:	8c 81       	ldd	r24, Y+4	; 0x04
     c3a:	9d 81       	ldd	r25, Y+5	; 0x05
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	71 f0       	breq	.+28     	; 0xc5c <GPIO_setupPinDirection+0x68>
     c40:	bc c0       	rjmp	.+376    	; 0xdba <GPIO_setupPinDirection+0x1c6>
     c42:	2c 81       	ldd	r18, Y+4	; 0x04
     c44:	3d 81       	ldd	r19, Y+5	; 0x05
     c46:	22 30       	cpi	r18, 0x02	; 2
     c48:	31 05       	cpc	r19, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <GPIO_setupPinDirection+0x5a>
     c4c:	5f c0       	rjmp	.+190    	; 0xd0c <GPIO_setupPinDirection+0x118>
     c4e:	8c 81       	ldd	r24, Y+4	; 0x04
     c50:	9d 81       	ldd	r25, Y+5	; 0x05
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	91 05       	cpc	r25, r1
     c56:	09 f4       	brne	.+2      	; 0xc5a <GPIO_setupPinDirection+0x66>
     c58:	85 c0       	rjmp	.+266    	; 0xd64 <GPIO_setupPinDirection+0x170>
     c5a:	af c0       	rjmp	.+350    	; 0xdba <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c62:	aa e3       	ldi	r26, 0x3A	; 58
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	ea e3       	ldi	r30, 0x3A	; 58
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <GPIO_setupPinDirection+0x8c>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <GPIO_setupPinDirection+0x88>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	98 c0       	rjmp	.+304    	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c8a:	aa e3       	ldi	r26, 0x3A	; 58
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	ea e3       	ldi	r30, 0x3A	; 58
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <GPIO_setupPinDirection+0xb4>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <GPIO_setupPinDirection+0xb0>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	83 c0       	rjmp	.+262    	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     cba:	a7 e3       	ldi	r26, 0x37	; 55
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e3       	ldi	r30, 0x37	; 55
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <GPIO_setupPinDirection+0xe4>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <GPIO_setupPinDirection+0xe0>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	6c c0       	rjmp	.+216    	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ce2:	a7 e3       	ldi	r26, 0x37	; 55
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e3       	ldi	r30, 0x37	; 55
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <GPIO_setupPinDirection+0x10c>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <GPIO_setupPinDirection+0x108>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	57 c0       	rjmp	.+174    	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	a1 f4       	brne	.+40     	; 0xd3a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d12:	a4 e3       	ldi	r26, 0x34	; 52
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <GPIO_setupPinDirection+0x13c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <GPIO_setupPinDirection+0x138>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	40 c0       	rjmp	.+128    	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d3a:	a4 e3       	ldi	r26, 0x34	; 52
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e4 e3       	ldi	r30, 0x34	; 52
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <GPIO_setupPinDirection+0x164>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <GPIO_setupPinDirection+0x160>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	2b c0       	rjmp	.+86     	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d6a:	a1 e3       	ldi	r26, 0x31	; 49
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e1 e3       	ldi	r30, 0x31	; 49
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <GPIO_setupPinDirection+0x194>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <GPIO_setupPinDirection+0x190>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	14 c0       	rjmp	.+40     	; 0xdba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d92:	a1 e3       	ldi	r26, 0x31	; 49
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e1 e3       	ldi	r30, 0x31	; 49
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <GPIO_setupPinDirection+0x1bc>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <GPIO_setupPinDirection+0x1b8>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <GPIO_writePin+0x6>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <GPIO_writePin+0x8>
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	6a 83       	std	Y+2, r22	; 0x02
     ddc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	88 30       	cpi	r24, 0x08	; 8
     de2:	08 f0       	brcs	.+2      	; 0xde6 <GPIO_writePin+0x1c>
     de4:	d5 c0       	rjmp	.+426    	; 0xf90 <GPIO_writePin+0x1c6>
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	84 30       	cpi	r24, 0x04	; 4
     dea:	08 f0       	brcs	.+2      	; 0xdee <GPIO_writePin+0x24>
     dec:	d1 c0       	rjmp	.+418    	; 0xf90 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3d 83       	std	Y+5, r19	; 0x05
     df6:	2c 83       	std	Y+4, r18	; 0x04
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <GPIO_writePin+0x3a>
     e02:	43 c0       	rjmp	.+134    	; 0xe8a <GPIO_writePin+0xc0>
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	2c f4       	brge	.+10     	; 0xe18 <GPIO_writePin+0x4e>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	71 f0       	breq	.+28     	; 0xe32 <GPIO_writePin+0x68>
     e16:	bc c0       	rjmp	.+376    	; 0xf90 <GPIO_writePin+0x1c6>
     e18:	2c 81       	ldd	r18, Y+4	; 0x04
     e1a:	3d 81       	ldd	r19, Y+5	; 0x05
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <GPIO_writePin+0x5a>
     e22:	5f c0       	rjmp	.+190    	; 0xee2 <GPIO_writePin+0x118>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <GPIO_writePin+0x66>
     e2e:	85 c0       	rjmp	.+266    	; 0xf3a <GPIO_writePin+0x170>
     e30:	af c0       	rjmp	.+350    	; 0xf90 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e38:	ab e3       	ldi	r26, 0x3B	; 59
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	eb e3       	ldi	r30, 0x3B	; 59
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_writePin+0x8c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_writePin+0x88>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	98 c0       	rjmp	.+304    	; 0xf90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     e60:	ab e3       	ldi	r26, 0x3B	; 59
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e3       	ldi	r30, 0x3B	; 59
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <GPIO_writePin+0xb4>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <GPIO_writePin+0xb0>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	83 c0       	rjmp	.+262    	; 0xf90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_writePin+0xe4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_writePin+0xe0>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	6c c0       	rjmp	.+216    	; 0xf90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_writePin+0x10c>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_writePin+0x108>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	57 c0       	rjmp	.+174    	; 0xf90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	a1 f4       	brne	.+40     	; 0xf10 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     ee8:	a5 e3       	ldi	r26, 0x35	; 53
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e5 e3       	ldi	r30, 0x35	; 53
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_writePin+0x13c>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_writePin+0x138>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	40 c0       	rjmp	.+128    	; 0xf90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f10:	a5 e3       	ldi	r26, 0x35	; 53
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e3       	ldi	r30, 0x35	; 53
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO_writePin+0x164>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <GPIO_writePin+0x160>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	2b c0       	rjmp	.+86     	; 0xf90 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     f40:	a2 e3       	ldi	r26, 0x32	; 50
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e2 e3       	ldi	r30, 0x32	; 50
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_writePin+0x194>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_writePin+0x190>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f68:	a2 e3       	ldi	r26, 0x32	; 50
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e2 e3       	ldi	r30, 0x32	; 50
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_writePin+0x1bc>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_writePin+0x1b8>
     f8a:	80 95       	com	r24
     f8c:	84 23       	and	r24, r20
     f8e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <GPIO_readPin+0x6>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <GPIO_readPin+0x8>
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     fb2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <GPIO_readPin+0x1c>
     fba:	84 c0       	rjmp	.+264    	; 0x10c4 <GPIO_readPin+0x124>
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	84 30       	cpi	r24, 0x04	; 4
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <GPIO_readPin+0x24>
     fc2:	80 c0       	rjmp	.+256    	; 0x10c4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	3d 83       	std	Y+5, r19	; 0x05
     fcc:	2c 83       	std	Y+4, r18	; 0x04
     fce:	4c 81       	ldd	r20, Y+4	; 0x04
     fd0:	5d 81       	ldd	r21, Y+5	; 0x05
     fd2:	41 30       	cpi	r20, 0x01	; 1
     fd4:	51 05       	cpc	r21, r1
     fd6:	79 f1       	breq	.+94     	; 0x1036 <GPIO_readPin+0x96>
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	91 05       	cpc	r25, r1
     fe0:	34 f4       	brge	.+12     	; 0xfee <GPIO_readPin+0x4e>
     fe2:	2c 81       	ldd	r18, Y+4	; 0x04
     fe4:	3d 81       	ldd	r19, Y+5	; 0x05
     fe6:	21 15       	cp	r18, r1
     fe8:	31 05       	cpc	r19, r1
     fea:	69 f0       	breq	.+26     	; 0x1006 <GPIO_readPin+0x66>
     fec:	6b c0       	rjmp	.+214    	; 0x10c4 <GPIO_readPin+0x124>
     fee:	4c 81       	ldd	r20, Y+4	; 0x04
     ff0:	5d 81       	ldd	r21, Y+5	; 0x05
     ff2:	42 30       	cpi	r20, 0x02	; 2
     ff4:	51 05       	cpc	r21, r1
     ff6:	b9 f1       	breq	.+110    	; 0x1066 <GPIO_readPin+0xc6>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <GPIO_readPin+0x64>
    1002:	49 c0       	rjmp	.+146    	; 0x1096 <GPIO_readPin+0xf6>
    1004:	5f c0       	rjmp	.+190    	; 0x10c4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1006:	e9 e3       	ldi	r30, 0x39	; 57
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_readPin+0x7e>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_readPin+0x7a>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	49 c0       	rjmp	.+146    	; 0x10c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	47 c0       	rjmp	.+142    	; 0x10c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1036:	e6 e3       	ldi	r30, 0x36	; 54
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_readPin+0xae>
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_readPin+0xaa>
    1052:	ca 01       	movw	r24, r20
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	88 23       	and	r24, r24
    105a:	19 f0       	breq	.+6      	; 0x1062 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	31 c0       	rjmp	.+98     	; 0x10c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	2f c0       	rjmp	.+94     	; 0x10c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1066:	e3 e3       	ldi	r30, 0x33	; 51
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_readPin+0xde>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_readPin+0xda>
    1082:	ca 01       	movw	r24, r20
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	90 70       	andi	r25, 0x00	; 0
    1088:	88 23       	and	r24, r24
    108a:	19 f0       	breq	.+6      	; 0x1092 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	19 c0       	rjmp	.+50     	; 0x10c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	17 c0       	rjmp	.+46     	; 0x10c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1096:	e0 e3       	ldi	r30, 0x30	; 48
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a9 01       	movw	r20, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_readPin+0x10e>
    10aa:	55 95       	asr	r21
    10ac:	47 95       	ror	r20
    10ae:	8a 95       	dec	r24
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_readPin+0x10a>
    10b2:	ca 01       	movw	r24, r20
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10c2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_setupPortDirection+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_setupPortDirection+0x8>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	90 f5       	brcc	.+100    	; 0x1150 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3c 83       	std	Y+4, r19	; 0x04
    10f4:	2b 83       	std	Y+3, r18	; 0x03
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	d1 f0       	breq	.+52     	; 0x1134 <GPIO_setupPortDirection+0x5e>
    1100:	2b 81       	ldd	r18, Y+3	; 0x03
    1102:	3c 81       	ldd	r19, Y+4	; 0x04
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	31 05       	cpc	r19, r1
    1108:	2c f4       	brge	.+10     	; 0x1114 <GPIO_setupPortDirection+0x3e>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	61 f0       	breq	.+24     	; 0x112a <GPIO_setupPortDirection+0x54>
    1112:	1e c0       	rjmp	.+60     	; 0x1150 <GPIO_setupPortDirection+0x7a>
    1114:	2b 81       	ldd	r18, Y+3	; 0x03
    1116:	3c 81       	ldd	r19, Y+4	; 0x04
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	81 f0       	breq	.+32     	; 0x113e <GPIO_setupPortDirection+0x68>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	91 05       	cpc	r25, r1
    1126:	81 f0       	breq	.+32     	; 0x1148 <GPIO_setupPortDirection+0x72>
    1128:	13 c0       	rjmp	.+38     	; 0x1150 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    112a:	ea e3       	ldi	r30, 0x3A	; 58
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	80 83       	st	Z, r24
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	80 83       	st	Z, r24
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1148:	e1 e3       	ldi	r30, 0x31	; 49
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <GPIO_writePort+0x6>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <GPIO_writePort+0x8>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	90 f5       	brcc	.+100    	; 0x11d8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3c 83       	std	Y+4, r19	; 0x04
    117c:	2b 83       	std	Y+3, r18	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	d1 f0       	breq	.+52     	; 0x11bc <GPIO_writePort+0x5e>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <GPIO_writePort+0x3e>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <GPIO_writePort+0x54>
    119a:	1e c0       	rjmp	.+60     	; 0x11d8 <GPIO_writePort+0x7a>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <GPIO_writePort+0x68>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <GPIO_writePort+0x72>
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    11c6:	e5 e3       	ldi	r30, 0x35	; 53
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    11d0:	e2 e3       	ldi	r30, 0x32	; 50
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <GPIO_readPort+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_readPort+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    11f4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	90 f5       	brcc	.+100    	; 0x1260 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3c 83       	std	Y+4, r19	; 0x04
    1204:	2b 83       	std	Y+3, r18	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	d1 f0       	breq	.+52     	; 0x1244 <GPIO_readPort+0x5e>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <GPIO_readPort+0x3e>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	61 f0       	breq	.+24     	; 0x123a <GPIO_readPort+0x54>
    1222:	1e c0       	rjmp	.+60     	; 0x1260 <GPIO_readPort+0x7a>
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	3c 81       	ldd	r19, Y+4	; 0x04
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	81 f0       	breq	.+32     	; 0x124e <GPIO_readPort+0x68>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <GPIO_readPort+0x72>
    1238:	13 c0       	rjmp	.+38     	; 0x1260 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    123a:	e9 e3       	ldi	r30, 0x39	; 57
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	0e c0       	rjmp	.+28     	; 0x1260 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1244:	e6 e3       	ldi	r30, 0x36	; 54
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	09 c0       	rjmp	.+18     	; 0x1260 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    124e:	e3 e3       	ldi	r30, 0x33	; 51
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2e 97       	sbiw	r28, 0x0e	; 14
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <GPIO_setupPinDirection>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 ea       	ldi	r26, 0xA0	; 160
    129e:	b1 e4       	ldi	r27, 0x41	; 65
    12a0:	8b 87       	std	Y+11, r24	; 0x0b
    12a2:	9c 87       	std	Y+12, r25	; 0x0c
    12a4:	ad 87       	std	Y+13, r26	; 0x0d
    12a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8f 83       	std	Y+7, r24	; 0x07
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	a9 87       	std	Y+9, r26	; 0x09
    12c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <LCD_init+0x7a>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <LCD_init+0xf8>
	else if (__tmp > 65535)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	0f c0       	rjmp	.+30     	; 0x134a <LCD_init+0xda>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_init+0xc8>
    133c:	9c 83       	std	Y+4, r25	; 0x04
    133e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <LCD_init+0xbc>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_init+0x104>
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1384:	88 e3       	ldi	r24, 0x38	; 56
    1386:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    138a:	8c e0       	ldi	r24, 0x0C	; 12
    138c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_sendCommand>
}
    1396:	2e 96       	adiw	r28, 0x0e	; 14
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	e9 97       	sbiw	r28, 0x39	; 57
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e8       	ldi	r26, 0x80	; 128
    13ce:	bf e3       	ldi	r27, 0x3F	; 63
    13d0:	8d ab       	std	Y+53, r24	; 0x35
    13d2:	9e ab       	std	Y+54, r25	; 0x36
    13d4:	af ab       	std	Y+55, r26	; 0x37
    13d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	6d a9       	ldd	r22, Y+53	; 0x35
    13da:	7e a9       	ldd	r23, Y+54	; 0x36
    13dc:	8f a9       	ldd	r24, Y+55	; 0x37
    13de:	98 ad       	ldd	r25, Y+56	; 0x38
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a ef       	ldi	r20, 0xFA	; 250
    13e6:	54 e4       	ldi	r21, 0x44	; 68
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	89 ab       	std	Y+49, r24	; 0x31
    13f2:	9a ab       	std	Y+50, r25	; 0x32
    13f4:	ab ab       	std	Y+51, r26	; 0x33
    13f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13f8:	69 a9       	ldd	r22, Y+49	; 0x31
    13fa:	7a a9       	ldd	r23, Y+50	; 0x32
    13fc:	8b a9       	ldd	r24, Y+51	; 0x33
    13fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <LCD_sendCommand+0x72>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	98 ab       	std	Y+48, r25	; 0x30
    1416:	8f a7       	std	Y+47, r24	; 0x2f
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    141a:	69 a9       	ldd	r22, Y+49	; 0x31
    141c:	7a a9       	ldd	r23, Y+50	; 0x32
    141e:	8b a9       	ldd	r24, Y+51	; 0x33
    1420:	9c a9       	ldd	r25, Y+52	; 0x34
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	6d a9       	ldd	r22, Y+53	; 0x35
    1434:	7e a9       	ldd	r23, Y+54	; 0x36
    1436:	8f a9       	ldd	r24, Y+55	; 0x37
    1438:	98 ad       	ldd	r25, Y+56	; 0x38
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	98 ab       	std	Y+48, r25	; 0x30
    1458:	8f a7       	std	Y+47, r24	; 0x2f
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_sendCommand+0xd2>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9e a7       	std	Y+46, r25	; 0x2e
    1462:	8d a7       	std	Y+45, r24	; 0x2d
    1464:	8d a5       	ldd	r24, Y+45	; 0x2d
    1466:	9e a5       	ldd	r25, Y+46	; 0x2e
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_sendCommand+0xc0>
    146c:	9e a7       	std	Y+46, r25	; 0x2e
    146e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8f a5       	ldd	r24, Y+47	; 0x2f
    1472:	98 a9       	ldd	r25, Y+48	; 0x30
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	98 ab       	std	Y+48, r25	; 0x30
    1478:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8f a5       	ldd	r24, Y+47	; 0x2f
    147c:	98 a9       	ldd	r25, Y+48	; 0x30
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <LCD_sendCommand+0xb4>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	69 a9       	ldd	r22, Y+49	; 0x31
    1486:	7a a9       	ldd	r23, Y+50	; 0x32
    1488:	8b a9       	ldd	r24, Y+51	; 0x33
    148a:	9c a9       	ldd	r25, Y+52	; 0x34
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	98 ab       	std	Y+48, r25	; 0x30
    1496:	8f a7       	std	Y+47, r24	; 0x2f
    1498:	8f a5       	ldd	r24, Y+47	; 0x2f
    149a:	98 a9       	ldd	r25, Y+48	; 0x30
    149c:	9c a7       	std	Y+44, r25	; 0x2c
    149e:	8b a7       	std	Y+43, r24	; 0x2b
    14a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_sendCommand+0xfc>
    14a8:	9c a7       	std	Y+44, r25	; 0x2c
    14aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e8       	ldi	r26, 0x80	; 128
    14bc:	bf e3       	ldi	r27, 0x3F	; 63
    14be:	8f a3       	std	Y+39, r24	; 0x27
    14c0:	98 a7       	std	Y+40, r25	; 0x28
    14c2:	a9 a7       	std	Y+41, r26	; 0x29
    14c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	6f a1       	ldd	r22, Y+39	; 0x27
    14c8:	78 a5       	ldd	r23, Y+40	; 0x28
    14ca:	89 a5       	ldd	r24, Y+41	; 0x29
    14cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a ef       	ldi	r20, 0xFA	; 250
    14d4:	54 e4       	ldi	r21, 0x44	; 68
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8b a3       	std	Y+35, r24	; 0x23
    14e0:	9c a3       	std	Y+36, r25	; 0x24
    14e2:	ad a3       	std	Y+37, r26	; 0x25
    14e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14e6:	6b a1       	ldd	r22, Y+35	; 0x23
    14e8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ea:	8d a1       	ldd	r24, Y+37	; 0x25
    14ec:	9e a1       	ldd	r25, Y+38	; 0x26
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	2c f4       	brge	.+10     	; 0x1508 <LCD_sendCommand+0x160>
		__ticks = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9a a3       	std	Y+34, r25	; 0x22
    1504:	89 a3       	std	Y+33, r24	; 0x21
    1506:	3f c0       	rjmp	.+126    	; 0x1586 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1508:	6b a1       	ldd	r22, Y+35	; 0x23
    150a:	7c a1       	ldd	r23, Y+36	; 0x24
    150c:	8d a1       	ldd	r24, Y+37	; 0x25
    150e:	9e a1       	ldd	r25, Y+38	; 0x26
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	4c f5       	brge	.+82     	; 0x1572 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	6f a1       	ldd	r22, Y+39	; 0x27
    1522:	78 a5       	ldd	r23, Y+40	; 0x28
    1524:	89 a5       	ldd	r24, Y+41	; 0x29
    1526:	9a a5       	ldd	r25, Y+42	; 0x2a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9a a3       	std	Y+34, r25	; 0x22
    1546:	89 a3       	std	Y+33, r24	; 0x21
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <LCD_sendCommand+0x1c0>
    154a:	88 ec       	ldi	r24, 0xC8	; 200
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	98 a3       	std	Y+32, r25	; 0x20
    1550:	8f 8f       	std	Y+31, r24	; 0x1f
    1552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1554:	98 a1       	ldd	r25, Y+32	; 0x20
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <LCD_sendCommand+0x1ae>
    155a:	98 a3       	std	Y+32, r25	; 0x20
    155c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	89 a1       	ldd	r24, Y+33	; 0x21
    1560:	9a a1       	ldd	r25, Y+34	; 0x22
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9a a3       	std	Y+34, r25	; 0x22
    1566:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	89 a1       	ldd	r24, Y+33	; 0x21
    156a:	9a a1       	ldd	r25, Y+34	; 0x22
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <LCD_sendCommand+0x1a2>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9a a3       	std	Y+34, r25	; 0x22
    1584:	89 a3       	std	Y+33, r24	; 0x21
    1586:	89 a1       	ldd	r24, Y+33	; 0x21
    1588:	9a a1       	ldd	r25, Y+34	; 0x22
    158a:	9e 8f       	std	Y+30, r25	; 0x1e
    158c:	8d 8f       	std	Y+29, r24	; 0x1d
    158e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <LCD_sendCommand+0x1ea>
    1596:	9e 8f       	std	Y+30, r25	; 0x1e
    1598:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	69 ad       	ldd	r22, Y+57	; 0x39
    159e:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePort>
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e8       	ldi	r26, 0x80	; 128
    15a8:	bf e3       	ldi	r27, 0x3F	; 63
    15aa:	89 8f       	std	Y+25, r24	; 0x19
    15ac:	9a 8f       	std	Y+26, r25	; 0x1a
    15ae:	ab 8f       	std	Y+27, r26	; 0x1b
    15b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b2:	69 8d       	ldd	r22, Y+25	; 0x19
    15b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	4a ef       	ldi	r20, 0xFA	; 250
    15c0:	54 e4       	ldi	r21, 0x44	; 68
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8d 8b       	std	Y+21, r24	; 0x15
    15cc:	9e 8b       	std	Y+22, r25	; 0x16
    15ce:	af 8b       	std	Y+23, r26	; 0x17
    15d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15d2:	6d 89       	ldd	r22, Y+21	; 0x15
    15d4:	7e 89       	ldd	r23, Y+22	; 0x16
    15d6:	8f 89       	ldd	r24, Y+23	; 0x17
    15d8:	98 8d       	ldd	r25, Y+24	; 0x18
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 8b       	std	Y+20, r25	; 0x14
    15f0:	8b 8b       	std	Y+19, r24	; 0x13
    15f2:	3f c0       	rjmp	.+126    	; 0x1672 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    15f4:	6d 89       	ldd	r22, Y+21	; 0x15
    15f6:	7e 89       	ldd	r23, Y+22	; 0x16
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	98 8d       	ldd	r25, Y+24	; 0x18
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	3f ef       	ldi	r19, 0xFF	; 255
    1600:	4f e7       	ldi	r20, 0x7F	; 127
    1602:	57 e4       	ldi	r21, 0x47	; 71
    1604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1608:	18 16       	cp	r1, r24
    160a:	4c f5       	brge	.+82     	; 0x165e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160c:	69 8d       	ldd	r22, Y+25	; 0x19
    160e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9c 8b       	std	Y+20, r25	; 0x14
    1632:	8b 8b       	std	Y+19, r24	; 0x13
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <LCD_sendCommand+0x2ac>
    1636:	88 ec       	ldi	r24, 0xC8	; 200
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9a 8b       	std	Y+18, r25	; 0x12
    163c:	89 8b       	std	Y+17, r24	; 0x11
    163e:	89 89       	ldd	r24, Y+17	; 0x11
    1640:	9a 89       	ldd	r25, Y+18	; 0x12
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_sendCommand+0x29a>
    1646:	9a 8b       	std	Y+18, r25	; 0x12
    1648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164a:	8b 89       	ldd	r24, Y+19	; 0x13
    164c:	9c 89       	ldd	r25, Y+20	; 0x14
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	9c 8b       	std	Y+20, r25	; 0x14
    1652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	8b 89       	ldd	r24, Y+19	; 0x13
    1656:	9c 89       	ldd	r25, Y+20	; 0x14
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	69 f7       	brne	.-38     	; 0x1636 <LCD_sendCommand+0x28e>
    165c:	14 c0       	rjmp	.+40     	; 0x1686 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165e:	6d 89       	ldd	r22, Y+21	; 0x15
    1660:	7e 89       	ldd	r23, Y+22	; 0x16
    1662:	8f 89       	ldd	r24, Y+23	; 0x17
    1664:	98 8d       	ldd	r25, Y+24	; 0x18
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
    1672:	8b 89       	ldd	r24, Y+19	; 0x13
    1674:	9c 89       	ldd	r25, Y+20	; 0x14
    1676:	98 8b       	std	Y+16, r25	; 0x10
    1678:	8f 87       	std	Y+15, r24	; 0x0f
    167a:	8f 85       	ldd	r24, Y+15	; 0x0f
    167c:	98 89       	ldd	r25, Y+16	; 0x10
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD_sendCommand+0x2d6>
    1682:	98 8b       	std	Y+16, r25	; 0x10
    1684:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e8       	ldi	r26, 0x80	; 128
    1696:	bf e3       	ldi	r27, 0x3F	; 63
    1698:	8b 87       	std	Y+11, r24	; 0x0b
    169a:	9c 87       	std	Y+12, r25	; 0x0c
    169c:	ad 87       	std	Y+13, r26	; 0x0d
    169e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	54 e4       	ldi	r21, 0x44	; 68
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8f 83       	std	Y+7, r24	; 0x07
    16ba:	98 87       	std	Y+8, r25	; 0x08
    16bc:	a9 87       	std	Y+9, r26	; 0x09
    16be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    16e2:	6f 81       	ldd	r22, Y+7	; 0x07
    16e4:	78 85       	ldd	r23, Y+8	; 0x08
    16e6:	89 85       	ldd	r24, Y+9	; 0x09
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1700:	9e 85       	ldd	r25, Y+14	; 0x0e
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <LCD_sendCommand+0x39a>
    1724:	88 ec       	ldi	r24, 0xC8	; 200
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <LCD_sendCommand+0x388>
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <LCD_sendCommand+0x37c>
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_sendCommand+0x3c4>
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1774:	e9 96       	adiw	r28, 0x39	; 57
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	e9 97       	sbiw	r28, 0x39	; 57
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 e8       	ldi	r26, 0x80	; 128
    17ac:	bf e3       	ldi	r27, 0x3F	; 63
    17ae:	8d ab       	std	Y+53, r24	; 0x35
    17b0:	9e ab       	std	Y+54, r25	; 0x36
    17b2:	af ab       	std	Y+55, r26	; 0x37
    17b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6d a9       	ldd	r22, Y+53	; 0x35
    17b8:	7e a9       	ldd	r23, Y+54	; 0x36
    17ba:	8f a9       	ldd	r24, Y+55	; 0x37
    17bc:	98 ad       	ldd	r25, Y+56	; 0x38
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a ef       	ldi	r20, 0xFA	; 250
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	89 ab       	std	Y+49, r24	; 0x31
    17d0:	9a ab       	std	Y+50, r25	; 0x32
    17d2:	ab ab       	std	Y+51, r26	; 0x33
    17d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d6:	69 a9       	ldd	r22, Y+49	; 0x31
    17d8:	7a a9       	ldd	r23, Y+50	; 0x32
    17da:	8b a9       	ldd	r24, Y+51	; 0x33
    17dc:	9c a9       	ldd	r25, Y+52	; 0x34
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	98 ab       	std	Y+48, r25	; 0x30
    17f4:	8f a7       	std	Y+47, r24	; 0x2f
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    17f8:	69 a9       	ldd	r22, Y+49	; 0x31
    17fa:	7a a9       	ldd	r23, Y+50	; 0x32
    17fc:	8b a9       	ldd	r24, Y+51	; 0x33
    17fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6d a9       	ldd	r22, Y+53	; 0x35
    1812:	7e a9       	ldd	r23, Y+54	; 0x36
    1814:	8f a9       	ldd	r24, Y+55	; 0x37
    1816:	98 ad       	ldd	r25, Y+56	; 0x38
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	98 ab       	std	Y+48, r25	; 0x30
    1836:	8f a7       	std	Y+47, r24	; 0x2f
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_displayCharacter+0xd2>
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
    1842:	8d a5       	ldd	r24, Y+45	; 0x2d
    1844:	9e a5       	ldd	r25, Y+46	; 0x2e
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_displayCharacter+0xc0>
    184a:	9e a7       	std	Y+46, r25	; 0x2e
    184c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1850:	98 a9       	ldd	r25, Y+48	; 0x30
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_displayCharacter+0xb4>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	69 a9       	ldd	r22, Y+49	; 0x31
    1864:	7a a9       	ldd	r23, Y+50	; 0x32
    1866:	8b a9       	ldd	r24, Y+51	; 0x33
    1868:	9c a9       	ldd	r25, Y+52	; 0x34
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	98 ab       	std	Y+48, r25	; 0x30
    1874:	8f a7       	std	Y+47, r24	; 0x2f
    1876:	8f a5       	ldd	r24, Y+47	; 0x2f
    1878:	98 a9       	ldd	r25, Y+48	; 0x30
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
    187e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1880:	9c a5       	ldd	r25, Y+44	; 0x2c
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_displayCharacter+0xfc>
    1886:	9c a7       	std	Y+44, r25	; 0x2c
    1888:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e8       	ldi	r26, 0x80	; 128
    189a:	bf e3       	ldi	r27, 0x3F	; 63
    189c:	8f a3       	std	Y+39, r24	; 0x27
    189e:	98 a7       	std	Y+40, r25	; 0x28
    18a0:	a9 a7       	std	Y+41, r26	; 0x29
    18a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6f a1       	ldd	r22, Y+39	; 0x27
    18a6:	78 a5       	ldd	r23, Y+40	; 0x28
    18a8:	89 a5       	ldd	r24, Y+41	; 0x29
    18aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a ef       	ldi	r20, 0xFA	; 250
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8b a3       	std	Y+35, r24	; 0x23
    18be:	9c a3       	std	Y+36, r25	; 0x24
    18c0:	ad a3       	std	Y+37, r26	; 0x25
    18c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    18e6:	6b a1       	ldd	r22, Y+35	; 0x23
    18e8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ea:	8d a1       	ldd	r24, Y+37	; 0x25
    18ec:	9e a1       	ldd	r25, Y+38	; 0x26
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1900:	78 a5       	ldd	r23, Y+40	; 0x28
    1902:	89 a5       	ldd	r24, Y+41	; 0x29
    1904:	9a a5       	ldd	r25, Y+42	; 0x2a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9a a3       	std	Y+34, r25	; 0x22
    1924:	89 a3       	std	Y+33, r24	; 0x21
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_displayCharacter+0x1c0>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	98 a3       	std	Y+32, r25	; 0x20
    192e:	8f 8f       	std	Y+31, r24	; 0x1f
    1930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1932:	98 a1       	ldd	r25, Y+32	; 0x20
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_displayCharacter+0x1ae>
    1938:	98 a3       	std	Y+32, r25	; 0x20
    193a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	89 a1       	ldd	r24, Y+33	; 0x21
    193e:	9a a1       	ldd	r25, Y+34	; 0x22
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9a a3       	std	Y+34, r25	; 0x22
    1944:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	89 a1       	ldd	r24, Y+33	; 0x21
    1948:	9a a1       	ldd	r25, Y+34	; 0x22
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_displayCharacter+0x1a2>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6b a1       	ldd	r22, Y+35	; 0x23
    1952:	7c a1       	ldd	r23, Y+36	; 0x24
    1954:	8d a1       	ldd	r24, Y+37	; 0x25
    1956:	9e a1       	ldd	r25, Y+38	; 0x26
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9a a3       	std	Y+34, r25	; 0x22
    1962:	89 a3       	std	Y+33, r24	; 0x21
    1964:	89 a1       	ldd	r24, Y+33	; 0x21
    1966:	9a a1       	ldd	r25, Y+34	; 0x22
    1968:	9e 8f       	std	Y+30, r25	; 0x1e
    196a:	8d 8f       	std	Y+29, r24	; 0x1d
    196c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_displayCharacter+0x1ea>
    1974:	9e 8f       	std	Y+30, r25	; 0x1e
    1976:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	69 ad       	ldd	r22, Y+57	; 0x39
    197c:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePort>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e8       	ldi	r26, 0x80	; 128
    1986:	bf e3       	ldi	r27, 0x3F	; 63
    1988:	89 8f       	std	Y+25, r24	; 0x19
    198a:	9a 8f       	std	Y+26, r25	; 0x1a
    198c:	ab 8f       	std	Y+27, r26	; 0x1b
    198e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	69 8d       	ldd	r22, Y+25	; 0x19
    1992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8d 8b       	std	Y+21, r24	; 0x15
    19aa:	9e 8b       	std	Y+22, r25	; 0x16
    19ac:	af 8b       	std	Y+23, r26	; 0x17
    19ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b0:	6d 89       	ldd	r22, Y+21	; 0x15
    19b2:	7e 89       	ldd	r23, Y+22	; 0x16
    19b4:	8f 89       	ldd	r24, Y+23	; 0x17
    19b6:	98 8d       	ldd	r25, Y+24	; 0x18
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	69 8d       	ldd	r22, Y+25	; 0x19
    19ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <LCD_displayCharacter+0x2ac>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
    1a1c:	89 89       	ldd	r24, Y+17	; 0x11
    1a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_displayCharacter+0x29a>
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <LCD_displayCharacter+0x28e>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a40:	8f 89       	ldd	r24, Y+23	; 0x17
    1a42:	98 8d       	ldd	r25, Y+24	; 0x18
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
    1a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5a:	98 89       	ldd	r25, Y+16	; 0x10
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_displayCharacter+0x2d6>
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 e5 06 	call	0xdca	; 0xdca <GPIO_writePin>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	9c 87       	std	Y+12, r25	; 0x0c
    1a7a:	ad 87       	std	Y+13, r26	; 0x0d
    1a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8f 83       	std	Y+7, r24	; 0x07
    1a98:	98 87       	std	Y+8, r25	; 0x08
    1a9a:	a9 87       	std	Y+9, r26	; 0x09
    1a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_displayCharacter+0x39a>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_displayCharacter+0x388>
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_displayCharacter+0x37c>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_displayCharacter+0x3c4>
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b52:	e9 96       	adiw	r28, 0x39	; 57
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <LCD_displayString+0x6>
    1b6a:	0f 92       	push	r0
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	9b 83       	std	Y+3, r25	; 0x03
    1b72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b74:	19 82       	std	Y+1, r1	; 0x01
    1b76:	0e c0       	rjmp	.+28     	; 0x1b94 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	9b 81       	ldd	r25, Y+3	; 0x03
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 0f       	add	r30, r18
    1b86:	f3 1f       	adc	r31, r19
    1b88:	80 81       	ld	r24, Z
    1b8a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_displayCharacter>
		i++;
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	8f 5f       	subi	r24, 0xFF	; 255
    1b92:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e2 0f       	add	r30, r18
    1ba2:	f3 1f       	adc	r31, r19
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 23       	and	r24, r24
    1ba8:	39 f7       	brne	.-50     	; 0x1b78 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <LCD_moveCursor+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <LCD_moveCursor+0x8>
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	3d 83       	std	Y+5, r19	; 0x05
    1bd0:	2c 83       	std	Y+4, r18	; 0x04
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	91 05       	cpc	r25, r1
    1bda:	c1 f0       	breq	.+48     	; 0x1c0c <LCD_moveCursor+0x56>
    1bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bde:	3d 81       	ldd	r19, Y+5	; 0x05
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <LCD_moveCursor+0x3a>
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	61 f0       	breq	.+24     	; 0x1c06 <LCD_moveCursor+0x50>
    1bee:	19 c0       	rjmp	.+50     	; 0x1c22 <LCD_moveCursor+0x6c>
    1bf0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	69 f0       	breq	.+26     	; 0x1c14 <LCD_moveCursor+0x5e>
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	91 05       	cpc	r25, r1
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <LCD_moveCursor+0x66>
    1c04:	0e c0       	rjmp	.+28     	; 0x1c22 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	0b c0       	rjmp	.+22     	; 0x1c22 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	80 5c       	subi	r24, 0xC0	; 192
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	80 5f       	subi	r24, 0xF0	; 240
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	80 5b       	subi	r24, 0xB0	; 176
    1c20:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	80 68       	ori	r24, 0x80	; 128
    1c26:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_sendCommand>
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <LCD_displayStringRowColumn+0x6>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <LCD_displayStringRowColumn+0x8>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	6a 83       	std	Y+2, r22	; 0x02
    1c4a:	5c 83       	std	Y+4, r21	; 0x04
    1c4c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	6a 81       	ldd	r22, Y+2	; 0x02
    1c52:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_displayString>
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	62 97       	sbiw	r28, 0x12	; 18
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1c84:	89 89       	ldd	r24, Y+17	; 0x11
    1c86:	9a 89       	ldd	r25, Y+18	; 0x12
    1c88:	9e 01       	movw	r18, r28
    1c8a:	2f 5f       	subi	r18, 0xFF	; 255
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	b9 01       	movw	r22, r18
    1c90:	4a e0       	ldi	r20, 0x0A	; 10
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <itoa>
   LCD_displayString(buff); /* Display the string */
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_displayString>
}
    1ca0:	62 96       	adiw	r28, 0x12	; 18
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_sendCommand>
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <main>:

uint8 g_password[6];
uint8 g_charIndex = 0;

int main(void)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	2f 97       	sbiw	r28, 0x0f	; 15
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;

	/*Initializing modules needed*/

	LCD_init();
    1cda:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_init>

	UART_init(&g_uartConfiguration);
    1cde:	85 e7       	ldi	r24, 0x75	; 117
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <UART_init>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	aa ef       	ldi	r26, 0xFA	; 250
    1cec:	b3 e4       	ldi	r27, 0x43	; 67
    1cee:	8b 87       	std	Y+11, r24	; 0x0b
    1cf0:	9c 87       	std	Y+12, r25	; 0x0c
    1cf2:	ad 87       	std	Y+13, r26	; 0x0d
    1cf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a ef       	ldi	r20, 0xFA	; 250
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	98 87       	std	Y+8, r25	; 0x08
    1d12:	a9 87       	std	Y+9, r26	; 0x09
    1d14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <main+0x72>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <main+0xf0>
	else if (__tmp > 65535)
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <main+0xd2>
    1d7a:	88 ec       	ldi	r24, 0xC8	; 200
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <main+0xc0>
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <main+0xb4>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <main+0xfc>
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	/*End of Initialization section*/

	_delay_ms(500);

	LCD_displayString("Password is:");
    1dca:	80 e6       	ldi	r24, 0x60	; 96
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_displayString>
	LCD_moveCursor(1,0);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <LCD_moveCursor>

	while(1)
	{

		/* Receive String from MC1 through UART */
		UART_receiveString(g_password);
    1dda:	8d ec       	ldi	r24, 0xCD	; 205
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 97 11 	call	0x232e	; 0x232e <UART_receiveString>

		/* Display the received string on the LCD display */
		LCD_intgerToString(g_password[1]);
    1de2:	80 91 ce 00 	lds	r24, 0x00CE
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <LCD_intgerToString>
    1dee:	f5 cf       	rjmp	.-22     	; 0x1dda <main+0x114>

00001df0 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <Timer1_init+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <Timer1_init+0x8>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr ->mode)
    1e00:	e9 81       	ldd	r30, Y+1	; 0x01
    1e02:	fa 81       	ldd	r31, Y+2	; 0x02
    1e04:	85 81       	ldd	r24, Z+5	; 0x05
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	3c 83       	std	Y+4, r19	; 0x04
    1e0c:	2b 83       	std	Y+3, r18	; 0x03
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <Timer1_init+0x32>
    1e16:	2b 81       	ldd	r18, Y+3	; 0x03
    1e18:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1a:	21 30       	cpi	r18, 0x01	; 1
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	39 f1       	breq	.+78     	; 0x1e6e <Timer1_init+0x7e>
    1e20:	54 c0       	rjmp	.+168    	; 0x1eca <Timer1_init+0xda>
	{
	case NORMAL_MODE:

		/*Clear Register first then set the normal mode and prescalar*/
		TCCR1A = 0;
    1e22:	ef e4       	ldi	r30, 0x4F	; 79
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	10 82       	st	Z, r1
		TCCR1A = (TIMER_BIT_ENABLE<<FOC1A) | (TIMER_BIT_ENABLE<<FOC1B);
    1e28:	ef e4       	ldi	r30, 0x4F	; 79
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8c e0       	ldi	r24, 0x0C	; 12
    1e2e:	80 83       	st	Z, r24

		/*Clear Register first then set the normal mode and prescalar*/
		TCCR1B = 0;
    1e30:	ee e4       	ldi	r30, 0x4E	; 78
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	10 82       	st	Z, r1
		TCCR1B = (Config_Ptr->mode << TIMER1_WGM_BITS) | (Config_Ptr->prescaler);
    1e36:	ae e4       	ldi	r26, 0x4E	; 78
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	85 81       	ldd	r24, Z+5	; 0x05
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	98 2f       	mov	r25, r24
    1e52:	e9 81       	ldd	r30, Y+1	; 0x01
    1e54:	fa 81       	ldd	r31, Y+2	; 0x02
    1e56:	84 81       	ldd	r24, Z+4	; 0x04
    1e58:	89 2b       	or	r24, r25
    1e5a:	8c 93       	st	X, r24

		/* Initial Value for Timer1 */
		TCNT1 = 0;
    1e5c:	ec e4       	ldi	r30, 0x4C	; 76
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	11 82       	std	Z+1, r1	; 0x01
    1e62:	10 82       	st	Z, r1

		TIMSK = (TIMER_BIT_ENABLE << TIMER1_OVERFLOW_INT_BIT);
    1e64:	e9 e5       	ldi	r30, 0x59	; 89
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	84 e0       	ldi	r24, 0x04	; 4
    1e6a:	80 83       	st	Z, r24
    1e6c:	2e c0       	rjmp	.+92     	; 0x1eca <Timer1_init+0xda>
		break;


	case CTC_MODE:
		/*Clear Register first then set the normal mode and prescalar*/
		TCCR1A = 0;
    1e6e:	ef e4       	ldi	r30, 0x4F	; 79
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	10 82       	st	Z, r1
		TCCR1A = (TIMER_BIT_ENABLE<<FOC1A) | (TIMER_BIT_ENABLE<<FOC1B) ;
    1e74:	ef e4       	ldi	r30, 0x4F	; 79
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8c e0       	ldi	r24, 0x0C	; 12
    1e7a:	80 83       	st	Z, r24

		/*Clear Register first then set the normal mode and prescalar*/
		TCCR1B = 0;
    1e7c:	ee e4       	ldi	r30, 0x4E	; 78
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	10 82       	st	Z, r1
		TCCR1B = (Config_Ptr->mode << TIMER1_WGM_BITS) | (Config_Ptr->prescaler);
    1e82:	ae e4       	ldi	r26, 0x4E	; 78
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e9 81       	ldd	r30, Y+1	; 0x01
    1e88:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8a:	85 81       	ldd	r24, Z+5	; 0x05
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea2:	84 81       	ldd	r24, Z+4	; 0x04
    1ea4:	89 2b       	or	r24, r25
    1ea6:	8c 93       	st	X, r24

		/* Initial Value for Timer1 */
		TCNT1 = 0;
    1ea8:	ec e4       	ldi	r30, 0x4C	; 76
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	11 82       	std	Z+1, r1	; 0x01
    1eae:	10 82       	st	Z, r1

		OCR1A = Config_Ptr->compare_value;
    1eb0:	aa e4       	ldi	r26, 0x4A	; 74
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	11 96       	adiw	r26, 0x01	; 1
    1ebe:	9c 93       	st	X, r25
    1ec0:	8e 93       	st	-X, r24

		TIMSK = (TIMER_BIT_ENABLE << TIMER1_OVERFLOW_INT_BIT);
    1ec2:	e9 e5       	ldi	r30, 0x59	; 89
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	80 83       	st	Z, r24
		break;

	}

	SREG|= (1<<7);
    1eca:	af e5       	ldi	r26, 0x5F	; 95
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	ef e5       	ldi	r30, 0x5F	; 95
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 68       	ori	r24, 0x80	; 128
    1ed6:	8c 93       	st	X, r24
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <Timer1_deInit>:


void Timer1_deInit(void)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1eee:	ef e4       	ldi	r30, 0x4F	; 79
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	10 82       	st	Z, r1
	TCCR1B = 0;
    1ef4:	ee e4       	ldi	r30, 0x4E	; 78
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	10 82       	st	Z, r1

	TCNT1 = 0;
    1efa:	ec e4       	ldi	r30, 0x4C	; 76
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	11 82       	std	Z+1, r1	; 0x01
    1f00:	10 82       	st	Z, r1
	OCR1A = 0;
    1f02:	ea e4       	ldi	r30, 0x4A	; 74
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	11 82       	std	Z+1, r1	; 0x01
    1f08:	10 82       	st	Z, r1

	TIMSK = 0xC3;
    1f0a:	e9 e5       	ldi	r30, 0x59	; 89
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	83 ec       	ldi	r24, 0xC3	; 195
    1f10:	80 83       	st	Z, r24
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <Timer1_setCallBack>:


void Timer1_setCallBack	(void(*a_ptr)(void))
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <Timer1_setCallBack+0x6>
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
	/* Global variables to hold the address of the call back function in the application */
	static volatile void (*g_callBackPtr)(void) = NULL_PTR;
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <Timer1_Instance>:

Timer1_ConfigType * Timer1_Instance()
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	return &Timer1;
    1f38:	85 ec       	ldi	r24, 0xC5	; 197
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <Timer0_PWM_Init>:


void Timer0_PWM_Init(unsigned char set_duty_cycle)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	0f 92       	push	r0
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1f4e:	e2 e5       	ldi	r30, 0x52	; 82
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	10 82       	st	Z, r1

	OCR0  = (set_duty_cycle * 255)/ 100; // Set Compare Value
    1f54:	ec e5       	ldi	r30, 0x5C	; 92
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	ca 01       	movw	r24, r20
    1f60:	9c 01       	movw	r18, r24
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	c9 01       	movw	r24, r18
    1f68:	96 95       	lsr	r25
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	88 27       	eor	r24, r24
    1f6e:	97 95       	ror	r25
    1f70:	87 95       	ror	r24
    1f72:	82 1b       	sub	r24, r18
    1f74:	93 0b       	sbc	r25, r19
    1f76:	84 0f       	add	r24, r20
    1f78:	95 1f       	adc	r25, r21
    1f7a:	24 e6       	ldi	r18, 0x64	; 100
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	b9 01       	movw	r22, r18
    1f80:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1f84:	cb 01       	movw	r24, r22
    1f86:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1f88:	a7 e3       	ldi	r26, 0x37	; 55
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e7 e3       	ldi	r30, 0x37	; 55
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	8c 93       	st	X, r24
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1f96:	e3 e5       	ldi	r30, 0x53	; 83
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	8a e6       	ldi	r24, 0x6A	; 106
    1f9c:	80 83       	st	Z, r24

	if(set_duty_cycle == 0)
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	88 23       	and	r24, r24
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <Timer0_PWM_Init+0x70>
		CLEAR_BIT(TCCR0,CS01);
    1fa4:	a3 e5       	ldi	r26, 0x53	; 83
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e3 e5       	ldi	r30, 0x53	; 83
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8d 7f       	andi	r24, 0xFD	; 253
    1fb0:	8c 93       	st	X, r24
}
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <CalcPow>:
/*******************************************************************************
 *                      Function Definitions                                    *
 *******************************************************************************/

static uint8 CalcPow (uint8 num , uint8 pow)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <CalcPow+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <CalcPow+0x8>
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <CalcPow+0xa>
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8c 83       	std	Y+4, r24	; 0x04
    1fca:	6d 83       	std	Y+5, r22	; 0x05
	if(pow == 0)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	88 23       	and	r24, r24
    1fd0:	19 f4       	brne	.+6      	; 0x1fd8 <CalcPow+0x1e>
	{
		return 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	8e 83       	std	Y+6, r24	; 0x06
    1fd6:	1c c0       	rjmp	.+56     	; 0x2010 <CalcPow+0x56>
	}
	uint8 temp = num;
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 1; i< pow ; i++ )
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	0b c0       	rjmp	.+22     	; 0x1ffc <CalcPow+0x42>
	{
		num *= temp;
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	98 9f       	mul	r25, r24
    1fec:	80 2d       	mov	r24, r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	8c 83       	std	Y+4, r24	; 0x04
	if(pow == 0)
	{
		return 1;
	}
	uint8 temp = num;
	for(int i = 1; i< pow ; i++ )
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	82 17       	cp	r24, r18
    2008:	93 07       	cpc	r25, r19
    200a:	6c f3       	brlt	.-38     	; 0x1fe6 <CalcPow+0x2c>
	{
		num *= temp;
	}
	return num;
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	8e 83       	std	Y+6, r24	; 0x06
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2012:	26 96       	adiw	r28, 0x06	; 6
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <TWI_init>:

void TWI_init(void)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    202c:	e0 e2       	ldi	r30, 0x20	; 32
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	80 83       	st	Z, r24
	TWSR = 0x00;
    2034:	e1 e2       	ldi	r30, 0x21	; 33
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = 0b00000010; // my address = 0x01 :)
    203a:	e2 e2       	ldi	r30, 0x22	; 34
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	80 83       	st	Z, r24

	TWCR = (1<<TWEN); /* enable TWI */
    2042:	e6 e5       	ldi	r30, 0x56	; 86
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	84 e0       	ldi	r24, 0x04	; 4
    2048:	80 83       	st	Z, r24
}
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <TWI_init1>:


void TWI_init1(const TWI_ConfigType * Config_Ptr )
{
    2050:	ef 92       	push	r14
    2052:	ff 92       	push	r15
    2054:	0f 93       	push	r16
    2056:	1f 93       	push	r17
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <TWI_init1+0xe>
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9b 83       	std	Y+3, r25	; 0x03
    2066:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp;
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = (Config_Ptr->prescalar);
    2068:	a1 e2       	ldi	r26, 0x21	; 33
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ea 81       	ldd	r30, Y+2	; 0x02
    206e:	fb 81       	ldd	r31, Y+3	; 0x03
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	8c 93       	st	X, r24

	TWBR = (uint8) ( ( (uint16)( 8000000UL / ( g_bitRate[Config_Ptr->bit_rate])  ) - 16 )/ (2 * CalcPow(4 , (Config_Ptr->prescalar) )));
    2074:	ee 24       	eor	r14, r14
    2076:	ff 24       	eor	r15, r15
    2078:	68 94       	set
    207a:	e5 f8       	bld	r14, 5
    207c:	ea 81       	ldd	r30, Y+2	; 0x02
    207e:	fb 81       	ldd	r31, Y+3	; 0x03
    2080:	81 81       	ldd	r24, Z+1	; 0x01
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	fc 01       	movw	r30, r24
    2090:	e6 58       	subi	r30, 0x86	; 134
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	20 81       	ld	r18, Z
    2096:	31 81       	ldd	r19, Z+1	; 0x01
    2098:	42 81       	ldd	r20, Z+2	; 0x02
    209a:	53 81       	ldd	r21, Z+3	; 0x03
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	92 e1       	ldi	r25, 0x12	; 18
    20a0:	aa e7       	ldi	r26, 0x7A	; 122
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 01 12 	call	0x2402	; 0x2402 <__udivmodsi4>
    20ac:	da 01       	movw	r26, r20
    20ae:	c9 01       	movw	r24, r18
    20b0:	8c 01       	movw	r16, r24
    20b2:	00 51       	subi	r16, 0x10	; 16
    20b4:	10 40       	sbci	r17, 0x00	; 0
    20b6:	ea 81       	ldd	r30, Y+2	; 0x02
    20b8:	fb 81       	ldd	r31, Y+3	; 0x03
    20ba:	92 81       	ldd	r25, Z+2	; 0x02
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	69 2f       	mov	r22, r25
    20c0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CalcPow>
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	9c 01       	movw	r18, r24
    20ce:	c8 01       	movw	r24, r16
    20d0:	b9 01       	movw	r22, r18
    20d2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodhi4>
    20d6:	cb 01       	movw	r24, r22
    20d8:	f7 01       	movw	r30, r14
    20da:	80 83       	st	Z, r24
	//TWBR= CalcPow(4 , 2 );

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR = g_slaveAddresses[MY_ADDRESS]; // my address = 0x01 :)
    20dc:	e2 e2       	ldi	r30, 0x22	; 34
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 91 79 00 	lds	r24, 0x0079
    20e4:	80 83       	st	Z, r24

	TWCR = (1<<TWEN); /* enable TWI */
    20e6:	e6 e5       	ldi	r30, 0x56	; 86
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	84 e0       	ldi	r24, 0x04	; 4
    20ec:	80 83       	st	Z, r24
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	08 95       	ret

00002102 <TWI_start>:

void TWI_start(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    210a:	e6 e5       	ldi	r30, 0x56	; 86
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	84 ea       	ldi	r24, 0xA4	; 164
    2110:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2112:	e6 e5       	ldi	r30, 0x56	; 86
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	88 23       	and	r24, r24
    211a:	dc f7       	brge	.-10     	; 0x2112 <TWI_start+0x10>
}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <TWI_stop>:

void TWI_stop(void)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    212a:	e6 e5       	ldi	r30, 0x56	; 86
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	84 e9       	ldi	r24, 0x94	; 148
    2130:	80 83       	st	Z, r24
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2144:	e3 e2       	ldi	r30, 0x23	; 35
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    214c:	e6 e5       	ldi	r30, 0x56	; 86
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	84 e8       	ldi	r24, 0x84	; 132
    2152:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2154:	e6 e5       	ldi	r30, 0x56	; 86
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	88 23       	and	r24, r24
    215c:	dc f7       	brge	.-10     	; 0x2154 <TWI_writeByte+0x1c>
}
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    216e:	e6 e5       	ldi	r30, 0x56	; 86
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	84 ec       	ldi	r24, 0xC4	; 196
    2174:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2176:	e6 e5       	ldi	r30, 0x56	; 86
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	88 23       	and	r24, r24
    217e:	dc f7       	brge	.-10     	; 0x2176 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2180:	e3 e2       	ldi	r30, 0x23	; 35
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2194:	e6 e5       	ldi	r30, 0x56	; 86
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	84 e8       	ldi	r24, 0x84	; 132
    219a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    219c:	e6 e5       	ldi	r30, 0x56	; 86
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	88 23       	and	r24, r24
    21a4:	dc f7       	brge	.-10     	; 0x219c <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    21a6:	e3 e2       	ldi	r30, 0x23	; 35
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    21bc:	e1 e2       	ldi	r30, 0x21	; 33
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	88 7f       	andi	r24, 0xF8	; 248
    21c4:	89 83       	std	Y+1, r24	; 0x01
	return status;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init( UART_ConfigType * const Config_Ptr )
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <UART_init+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <UART_init+0x8>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    21e0:	1a 82       	std	Y+2, r1	; 0x02
    21e2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (UART_BIT_SETTER<< UART_2X_TRANS_SPEED_BIT_NUMBER);
    21e4:	eb e2       	ldi	r30, 0x2B	; 43
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (UART_BIT_SETTER<<UART_RECEIVER_ENABLE_BIT_NUMBER) | (UART_BIT_SETTER<<UART_TRANSMITTER_ENABLE_BIT_NUMBER);
    21ec:	ea e2       	ldi	r30, 0x2A	; 42
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	88 e1       	ldi	r24, 0x18	; 24
    21f2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (UART_BIT_SETTER<<UART_REGISTER_SELECT_BIT_NUMBER) | ( Config_Ptr->parity << UART_PARITY_MODE_BIT_SHIFTER) |
    21f4:	a0 e4       	ldi	r26, 0x40	; 64
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	eb 81       	ldd	r30, Y+3	; 0x03
    21fa:	fc 81       	ldd	r31, Y+4	; 0x04
    21fc:	81 81       	ldd	r24, Z+1	; 0x01
    21fe:	98 2f       	mov	r25, r24
    2200:	92 95       	swap	r25
    2202:	90 7f       	andi	r25, 0xF0	; 240
    2204:	eb 81       	ldd	r30, Y+3	; 0x03
    2206:	fc 81       	ldd	r31, Y+4	; 0x04
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	88 0f       	add	r24, r24
    220c:	88 0f       	add	r24, r24
    220e:	88 0f       	add	r24, r24
    2210:	89 2b       	or	r24, r25
    2212:	86 68       	ori	r24, 0x86	; 134
    2214:	8c 93       	st	X, r24
			( Config_Ptr->stop_bit << UART_STOP_BIT_SELECT_BIT_NUMBER )|( ( EIGHT_BIT_CHAR & 0x3 ) <<UART_CHAR_SIZE_BIT_SHIFTER);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baudRate_arr[Config_Ptr->baud_rate] * 8UL))) - 1);
    2216:	eb 81       	ldd	r30, Y+3	; 0x03
    2218:	fc 81       	ldd	r31, Y+4	; 0x04
    221a:	83 81       	ldd	r24, Z+3	; 0x03
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	fc 01       	movw	r30, r24
    222a:	e6 57       	subi	r30, 0x76	; 118
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	a2 81       	ldd	r26, Z+2	; 0x02
    2234:	b3 81       	ldd	r27, Z+3	; 0x03
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	aa 1f       	adc	r26, r26
    223c:	bb 1f       	adc	r27, r27
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	aa 1f       	adc	r26, r26
    2244:	bb 1f       	adc	r27, r27
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	aa 1f       	adc	r26, r26
    224c:	bb 1f       	adc	r27, r27
    224e:	9c 01       	movw	r18, r24
    2250:	ad 01       	movw	r20, r26
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	92 e1       	ldi	r25, 0x12	; 18
    2256:	aa e7       	ldi	r26, 0x7A	; 122
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 01 12 	call	0x2402	; 0x2402 <__udivmodsi4>
    2262:	da 01       	movw	r26, r20
    2264:	c9 01       	movw	r24, r18
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    226c:	e0 e4       	ldi	r30, 0x40	; 64
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	89 2f       	mov	r24, r25
    2276:	99 27       	eor	r25, r25
    2278:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    227a:	e9 e2       	ldi	r30, 0x29	; 41
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	80 83       	st	Z, r24
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	0f 92       	push	r0
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    229c:	eb e2       	ldi	r30, 0x2B	; 43
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	88 2f       	mov	r24, r24
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	80 72       	andi	r24, 0x20	; 32
    22a8:	90 70       	andi	r25, 0x00	; 0
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	b9 f3       	breq	.-18     	; 0x229c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    22ae:	ec e2       	ldi	r30, 0x2C	; 44
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    22c6:	eb e2       	ldi	r30, 0x2B	; 43
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 23       	and	r24, r24
    22ce:	dc f7       	brge	.-10     	; 0x22c6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    22d0:	ec e2       	ldi	r30, 0x2C	; 44
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
}
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <UART_sendString+0x6>
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	9b 83       	std	Y+3, r25	; 0x03
    22ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22ec:	19 82       	std	Y+1, r1	; 0x01
    22ee:	0e c0       	rjmp	.+28     	; 0x230c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	fc 01       	movw	r30, r24
    22fc:	e2 0f       	add	r30, r18
    22fe:	f3 1f       	adc	r31, r19
    2300:	80 81       	ld	r24, Z
    2302:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_sendByte>
		i++;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	8f 5f       	subi	r24, 0xFF	; 255
    230a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	fc 01       	movw	r30, r24
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	80 81       	ld	r24, Z
    231e:	88 23       	and	r24, r24
    2320:	39 f7       	brne	.-50     	; 0x22f0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <UART_receiveString+0xa>
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	9b 83       	std	Y+3, r25	; 0x03
    2340:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2342:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	9b 81       	ldd	r25, Y+3	; 0x03
    234e:	8c 01       	movw	r16, r24
    2350:	02 0f       	add	r16, r18
    2352:	13 1f       	adc	r17, r19
    2354:	0e 94 5f 11 	call	0x22be	; 0x22be <UART_recieveByte>
    2358:	f8 01       	movw	r30, r16
    235a:	80 83       	st	Z, r24
    235c:	0f c0       	rjmp	.+30     	; 0x237c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	8c 01       	movw	r16, r24
    2370:	02 0f       	add	r16, r18
    2372:	13 1f       	adc	r17, r19
    2374:	0e 94 5f 11 	call	0x22be	; 0x22be <UART_recieveByte>
    2378:	f8 01       	movw	r30, r16
    237a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	fc 01       	movw	r30, r24
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	80 81       	ld	r24, Z
    238e:	83 32       	cpi	r24, 0x23	; 35
    2390:	31 f7       	brne	.-52     	; 0x235e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	10 82       	st	Z, r1
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <__udivmodhi4>:
    23b4:	aa 1b       	sub	r26, r26
    23b6:	bb 1b       	sub	r27, r27
    23b8:	51 e1       	ldi	r21, 0x11	; 17
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <__udivmodhi4_ep>

000023bc <__udivmodhi4_loop>:
    23bc:	aa 1f       	adc	r26, r26
    23be:	bb 1f       	adc	r27, r27
    23c0:	a6 17       	cp	r26, r22
    23c2:	b7 07       	cpc	r27, r23
    23c4:	10 f0       	brcs	.+4      	; 0x23ca <__udivmodhi4_ep>
    23c6:	a6 1b       	sub	r26, r22
    23c8:	b7 0b       	sbc	r27, r23

000023ca <__udivmodhi4_ep>:
    23ca:	88 1f       	adc	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	5a 95       	dec	r21
    23d0:	a9 f7       	brne	.-22     	; 0x23bc <__udivmodhi4_loop>
    23d2:	80 95       	com	r24
    23d4:	90 95       	com	r25
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	08 95       	ret

000023dc <__divmodhi4>:
    23dc:	97 fb       	bst	r25, 7
    23de:	09 2e       	mov	r0, r25
    23e0:	07 26       	eor	r0, r23
    23e2:	0a d0       	rcall	.+20     	; 0x23f8 <__divmodhi4_neg1>
    23e4:	77 fd       	sbrc	r23, 7
    23e6:	04 d0       	rcall	.+8      	; 0x23f0 <__divmodhi4_neg2>
    23e8:	e5 df       	rcall	.-54     	; 0x23b4 <__udivmodhi4>
    23ea:	06 d0       	rcall	.+12     	; 0x23f8 <__divmodhi4_neg1>
    23ec:	00 20       	and	r0, r0
    23ee:	1a f4       	brpl	.+6      	; 0x23f6 <__divmodhi4_exit>

000023f0 <__divmodhi4_neg2>:
    23f0:	70 95       	com	r23
    23f2:	61 95       	neg	r22
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255

000023f6 <__divmodhi4_exit>:
    23f6:	08 95       	ret

000023f8 <__divmodhi4_neg1>:
    23f8:	f6 f7       	brtc	.-4      	; 0x23f6 <__divmodhi4_exit>
    23fa:	90 95       	com	r25
    23fc:	81 95       	neg	r24
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	08 95       	ret

00002402 <__udivmodsi4>:
    2402:	a1 e2       	ldi	r26, 0x21	; 33
    2404:	1a 2e       	mov	r1, r26
    2406:	aa 1b       	sub	r26, r26
    2408:	bb 1b       	sub	r27, r27
    240a:	fd 01       	movw	r30, r26
    240c:	0d c0       	rjmp	.+26     	; 0x2428 <__udivmodsi4_ep>

0000240e <__udivmodsi4_loop>:
    240e:	aa 1f       	adc	r26, r26
    2410:	bb 1f       	adc	r27, r27
    2412:	ee 1f       	adc	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	a2 17       	cp	r26, r18
    2418:	b3 07       	cpc	r27, r19
    241a:	e4 07       	cpc	r30, r20
    241c:	f5 07       	cpc	r31, r21
    241e:	20 f0       	brcs	.+8      	; 0x2428 <__udivmodsi4_ep>
    2420:	a2 1b       	sub	r26, r18
    2422:	b3 0b       	sbc	r27, r19
    2424:	e4 0b       	sbc	r30, r20
    2426:	f5 0b       	sbc	r31, r21

00002428 <__udivmodsi4_ep>:
    2428:	66 1f       	adc	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	1a 94       	dec	r1
    2432:	69 f7       	brne	.-38     	; 0x240e <__udivmodsi4_loop>
    2434:	60 95       	com	r22
    2436:	70 95       	com	r23
    2438:	80 95       	com	r24
    243a:	90 95       	com	r25
    243c:	9b 01       	movw	r18, r22
    243e:	ac 01       	movw	r20, r24
    2440:	bd 01       	movw	r22, r26
    2442:	cf 01       	movw	r24, r30
    2444:	08 95       	ret

00002446 <__prologue_saves__>:
    2446:	2f 92       	push	r2
    2448:	3f 92       	push	r3
    244a:	4f 92       	push	r4
    244c:	5f 92       	push	r5
    244e:	6f 92       	push	r6
    2450:	7f 92       	push	r7
    2452:	8f 92       	push	r8
    2454:	9f 92       	push	r9
    2456:	af 92       	push	r10
    2458:	bf 92       	push	r11
    245a:	cf 92       	push	r12
    245c:	df 92       	push	r13
    245e:	ef 92       	push	r14
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	ca 1b       	sub	r28, r26
    2470:	db 0b       	sbc	r29, r27
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	09 94       	ijmp

0000247e <__epilogue_restores__>:
    247e:	2a 88       	ldd	r2, Y+18	; 0x12
    2480:	39 88       	ldd	r3, Y+17	; 0x11
    2482:	48 88       	ldd	r4, Y+16	; 0x10
    2484:	5f 84       	ldd	r5, Y+15	; 0x0f
    2486:	6e 84       	ldd	r6, Y+14	; 0x0e
    2488:	7d 84       	ldd	r7, Y+13	; 0x0d
    248a:	8c 84       	ldd	r8, Y+12	; 0x0c
    248c:	9b 84       	ldd	r9, Y+11	; 0x0b
    248e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2490:	b9 84       	ldd	r11, Y+9	; 0x09
    2492:	c8 84       	ldd	r12, Y+8	; 0x08
    2494:	df 80       	ldd	r13, Y+7	; 0x07
    2496:	ee 80       	ldd	r14, Y+6	; 0x06
    2498:	fd 80       	ldd	r15, Y+5	; 0x05
    249a:	0c 81       	ldd	r16, Y+4	; 0x04
    249c:	1b 81       	ldd	r17, Y+3	; 0x03
    249e:	aa 81       	ldd	r26, Y+2	; 0x02
    24a0:	b9 81       	ldd	r27, Y+1	; 0x01
    24a2:	ce 0f       	add	r28, r30
    24a4:	d1 1d       	adc	r29, r1
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	ed 01       	movw	r28, r26
    24b2:	08 95       	ret

000024b4 <itoa>:
    24b4:	fb 01       	movw	r30, r22
    24b6:	9f 01       	movw	r18, r30
    24b8:	e8 94       	clt
    24ba:	42 30       	cpi	r20, 0x02	; 2
    24bc:	c4 f0       	brlt	.+48     	; 0x24ee <itoa+0x3a>
    24be:	45 32       	cpi	r20, 0x25	; 37
    24c0:	b4 f4       	brge	.+44     	; 0x24ee <itoa+0x3a>
    24c2:	4a 30       	cpi	r20, 0x0A	; 10
    24c4:	29 f4       	brne	.+10     	; 0x24d0 <itoa+0x1c>
    24c6:	97 fb       	bst	r25, 7
    24c8:	1e f4       	brtc	.+6      	; 0x24d0 <itoa+0x1c>
    24ca:	90 95       	com	r25
    24cc:	81 95       	neg	r24
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	64 2f       	mov	r22, r20
    24d2:	77 27       	eor	r23, r23
    24d4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodhi4>
    24d8:	80 5d       	subi	r24, 0xD0	; 208
    24da:	8a 33       	cpi	r24, 0x3A	; 58
    24dc:	0c f0       	brlt	.+2      	; 0x24e0 <itoa+0x2c>
    24de:	89 5d       	subi	r24, 0xD9	; 217
    24e0:	81 93       	st	Z+, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	a1 f7       	brne	.-24     	; 0x24d0 <itoa+0x1c>
    24e8:	16 f4       	brtc	.+4      	; 0x24ee <itoa+0x3a>
    24ea:	5d e2       	ldi	r21, 0x2D	; 45
    24ec:	51 93       	st	Z+, r21
    24ee:	10 82       	st	Z, r1
    24f0:	c9 01       	movw	r24, r18
    24f2:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <strrev>

000024f6 <strrev>:
    24f6:	dc 01       	movw	r26, r24
    24f8:	fc 01       	movw	r30, r24
    24fa:	67 2f       	mov	r22, r23
    24fc:	71 91       	ld	r23, Z+
    24fe:	77 23       	and	r23, r23
    2500:	e1 f7       	brne	.-8      	; 0x24fa <strrev+0x4>
    2502:	32 97       	sbiw	r30, 0x02	; 2
    2504:	04 c0       	rjmp	.+8      	; 0x250e <strrev+0x18>
    2506:	7c 91       	ld	r23, X
    2508:	6d 93       	st	X+, r22
    250a:	70 83       	st	Z, r23
    250c:	62 91       	ld	r22, -Z
    250e:	ae 17       	cp	r26, r30
    2510:	bf 07       	cpc	r27, r31
    2512:	c8 f3       	brcs	.-14     	; 0x2506 <strrev+0x10>
    2514:	08 95       	ret

00002516 <_exit>:
    2516:	f8 94       	cli

00002518 <__stop_program>:
    2518:	ff cf       	rjmp	.-2      	; 0x2518 <__stop_program>
